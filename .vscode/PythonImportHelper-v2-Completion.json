[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Engine.src.config",
        "description": "Engine.src.config",
        "isExtraImport": true,
        "detail": "Engine.src.config",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Wall",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "isExtraImport": true,
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class ImageLoader:\n    def __init__(self):\n        pass\n    def load(self,image,colorkey=[False,(0,0,0)],scale=(1,1)):\n        image=f\"{IMAGES_PATH}{image}\"\n        res= os.path.splitext(image)\n        if res==\".png\":\n            surface = pg.image.load(image).convert_alfa()\n        else:\n            surface = pg.image.load(image).convert()",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Images",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Images:\n    def __init__(self,image,pos=(0,0)):\n        self.image=image\n        self.pos=pos\n    def init_(self,scr):\n        scr.blit(self.image,self.pos)\n    def get_type(self):\n        return \"image\"\nclass Bot:\n    def __init__(self):",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Bot:\n    def __init__(self):\n        self.speed_x=4.2\n        self.speed_y=4.2\n        self.size=50\n        self.koef=7\n        self.radius=self.size/self.koef\n        self.x=r.randint(10,WIDTH-15)\n        self.y=r.randint(10,HEIGH-15)\n        self.rc=pg.Rect(self.x,self.y,self.radius,self.radius)",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Weapon:\n    def __init__(self,obj):\n        self.obj=obj\n        self.bullets=[]\n    def load_bullets(self,bulets):\n        self.bulets=bulets\n        for i in self.bulets:\n            #eng.add_objects(i)\n            pass\n        self.bulets_save=self.bulets",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Bullet:\n    def __init__(self,texure_bullet=None,width=5,height=5,damage=5,speed=3):\n        if texure_bullet==None:\n            self.texure_bullet=pg.Surface((width,height))\n            self.texure_bullet.fill((255,0,0))\n        else:\n            self.texure_bullet=texure_bullet\n            self.texure_bullet=pg.transform.scale(self.texure_bullet,size=(width,height))\n        self.rc=self.texure_bullet.get_rect()\n        self.x=0",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Player:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=100):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Wall",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Wall:\n    def __init__(self,start_xy=(0,0),width=10,height=10,texture=None):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((0,255,0))\n        else:\n            self.texture=texture\n            self.texture=pg.transform.scale(self.texture,size=(self.width,self.height))",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Circle:\n    def __init__(self, start_pos=(0, 0), radius=10, function=None):\n        self.x, self.y = start_pos\n        self.radius = radius\n        self.function = function\n        self.color = (0, 0, 0)\n    def set_color(self, color=(0, 0, 0)):\n        self.color = color\n    def move_x(self, n):\n        self.x += n",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Enemy:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=10):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Label:\n    def __init__(self, x, y, weight, height, text=\"Label1\", img_path=None):\n        self.x = x\n        self.y = y\n        self.weight = weight\n        self.height = height\n        self.text = text\n        self.img_path = img_path\n        if img_path != None:\n            self.zone = pg.image.load(self.img_path)",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Button:\n    def __init__(self, x: int, y: int, width: int, height: int, images_pathes=(), text=None, function=None, isPressed=False):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.text = text\n        self.images_pathes = images_pathes\n        self.function = function\n        self.isPressed = isPressed",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "Engine.backup.Engine bc3",
        "description": "Engine.backup.Engine bc3",
        "peekOfCode": "class Engine:\n    def __init__(self):\n        pg.init()\n        self.display = pg.display.set_mode((1280, 720))\n        self.w,self.h=(1280,720)\n        self.events = []\n        self.objects = {\"buttons\": [], \"lables\": [],\n                        \"enemys\": [], \"camera\": [], \"figures\": [], \"players\": [],\"walls\":[],\"images\":[],\"bullets\":[]}\n        self.runing = True\n        self.frame = pg.time.Clock()",
        "detail": "Engine.backup.Engine bc3",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class ImageLoader:\n    def __init__(self):\n        pass\n    def load(self,image,colorkey=[False,(0,0,0)],scale=(1,1)):\n        image=f\"{IMAGES_PATH}{image}\"\n        res= os.path.splitext(image)\n        if res==\".png\":\n            surface = pg.image.load(image).convert_alfa()\n        else:\n            surface = pg.image.load(image).convert()",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Images",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Images:\n    def __init__(self,image,pos=(0,0)):\n        self.image=image\n        self.pos=pos\n    def init_(self,scr):\n        scr.blit(self.image,self.pos)\n    def get_type(self):\n        return \"image\"\nclass Bot:\n    def __init__(self):",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Bot:\n    def __init__(self):\n        self.speed_x=4.2\n        self.speed_y=4.2\n        self.size=50\n        self.koef=7\n        self.radius=self.size/self.koef\n        self.x=r.randint(10,WIDTH-15)\n        self.y=r.randint(10,HEIGH-15)\n        self.rc=pg.Rect(self.x,self.y,self.radius,self.radius)",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Bullet:\n    def __init__(self,texure_bullet=None,width=5,height=5,damage=5,speed=3):\n        if texure_bullet==None:\n            self.texure_bullet=pg.Surface((width,height))\n            self.texure_bullet.fill((255,0,0))\n        else:\n            self.texure_bullet=texure_bullet\n            self.texure_bullet=pg.transform.scale(self.texure_bullet,size=(width,height))\n        self.rc=self.texure_bullet.get_rect()\n        self.x=0",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Player:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=100):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Wall",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Wall:\n    def __init__(self,start_xy=(0,0),width=10,height=10,texture=None):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((0,255,0))\n        else:\n            self.texture=texture\n            self.texture=pg.transform.scale(self.texture,size=(self.width,self.height))",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Circle:\n    def __init__(self, start_pos=(0, 0), radius=10, function=None):\n        self.x, self.y = start_pos\n        self.radius = radius\n        self.function = function\n        self.color = (0, 0, 0)\n    def set_color(self, color=(0, 0, 0)):\n        self.color = color\n    def move_x(self, n):\n        self.x += n",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Enemy:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=10):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Label:\n    def __init__(self, x, y, weight, height, text=\"Label1\", img_path=None):\n        self.x = x\n        self.y = y\n        self.weight = weight\n        self.height = height\n        self.text = text\n        self.img_path = img_path\n        if img_path != None:\n            self.zone = pg.image.load(self.img_path)",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Button:\n    def __init__(self, x: int, y: int, width: int, height: int, images_pathes=(), text=None, function=None, isPressed=False):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.text = text\n        self.images_pathes = images_pathes\n        self.function = function\n        self.isPressed = isPressed",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "Engine.backup.Engine copy",
        "description": "Engine.backup.Engine copy",
        "peekOfCode": "class Engine:\n    def __init__(self):\n        pg.init()\n        self.display = pg.display.set_mode((1280, 720))\n        self.w,self.h=(1280,720)\n        self.events = []\n        self.objects = {\"buttons\": [], \"lables\": [],\n                        \"enemys\": [], \"camera\": [], \"figures\": [], \"players\": [],\"walls\":[],\"images\":[],\"bullets\":[]}\n        self.runing = True\n        self.frame = pg.time.Clock()",
        "detail": "Engine.backup.Engine copy",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Bot:\n    def __init__(self):\n        self.speed_x=4.2\n        self.speed_y=4.2\n        self.size=50\n        self.koef=7\n        self.radius=self.size/self.koef\n        self.x=r.randint(10,WIDTH-15)\n        self.y=r.randint(10,HEIGH-15)\n        self.rc=pg.Rect(self.x,self.y,self.radius,self.radius)",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Player:\n    def __init__(self,name):\n        self.size=50\n        self.max_size=6000\n        self.koef=7\n        self.speed_koef=0.5\n        self.radius=self.size/self.koef\n        self.name=name\n        self.speed=5\n        self.del_koef=1.3",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Circle:\n    def __init__(self, start_pos=(0, 0), radius=10, function=None):\n        self.x, self.y = start_pos\n        self.radius = radius\n        self.function = function\n        self.color = (0, 0, 0)\n    def set_color(self, color=(0, 0, 0)):\n        self.color = color\n    def move_x(self, n):\n        self.x += n",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Wall",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Wall:\n    def __init__(self,x,y,width,heigh,color=(255,255,255)):\n        self.x,self.y=x,y\n        self.width,self.hiegh=width,heigh\n        self.color=color\n        self.rc=pg.Rect(self.x,self.y,self.width,self.hiegh)\n    def init_(self):\n        self.rc=pg.Rect(self.x,self.y,self.width,self.hiegh)\n    def get_type(self):\n        return \"wall\"",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Enemy:\n    def __init__(self,start_pos=(0,1),size=50):\n        self.x, self.y = start_pos\n        self.size=size\n        self.koef=0.5\n        self.radius=self.size/self.koef\n        self.color=(r.randint(0,255),r.randint(0,255),r.randint(0,255))\n        self.rc=pg.Rect(self.x-self.radius,self.y-self.radius,self.radius*2,self.radius*2)\n    def move_x(self, n):\n        self.x += n",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Label:\n    def __init__(self, x, y, weight, height, text=\"Label1\", img_path=None):\n        self.x = x\n        self.y = y\n        self.weight = weight\n        self.height = height\n        self.text = text\n        self.img_path = img_path\n        if img_path != None:\n            self.zone = pg.image.load(self.img_path)",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Button:\n    def __init__(self, x: int, y: int, width: int, height: int, images_pathes=(), text=None, function=None, isPressed=False):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.text = text\n        self.images_pathes = images_pathes\n        self.function = function\n        self.isPressed = isPressed",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "Engine.backup.Engine — копия",
        "description": "Engine.backup.Engine — копия",
        "peekOfCode": "class Engine:\n    def __init__(self):\n        pg.init()\n        self.display = pg.display.set_mode((1280, 720))\n        self.w,self.h=(1280,720)\n        self.events = []\n        self.objects = {\"buttons\": [], \"lables\": [],\n                        \"enemys\": [], \"camera\": [], \"figures\": [], \"players\": [],\"walls\":[],\"another\":[]}\n        self.runing = True\n        self.frame = pg.time.Clock()",
        "detail": "Engine.backup.Engine — копия",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class ImageLoader:\n    def __init__(self):\n        pass\n    def load(self,image,colorkey=[False,(0,0,0)],scale=(1,1)):\n        image=f\"{IMAGES_PATH}{image}\"\n        res= os.path.splitext(image)\n        if res==\".png\":\n            surface = pg.image.load(image).convert_alfa()\n        else:\n            surface = pg.image.load(image).convert()",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Image:\n    def __init__(self,image,pos=(0,0),isphone=False,speed=-5,width=1280):\n        self.image=image\n        self.x,self.y=pos\n        self.isphone=isphone\n        self.speedx=speed\n        self.speedy=0\n        self.width=1280\n    def init_(self,scr):\n        self.move()",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Bot:\n    def __init__(self):\n        self.speed_x=4.2\n        self.speed_y=4.2\n        self.size=50\n        self.koef=7\n        self.radius=self.size/self.koef\n        self.x=r.randint(10,WIDTH-15)\n        self.y=r.randint(10,HEIGH-15)\n        self.rc=pg.Rect(self.x,self.y,self.radius,self.radius)",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Weapon:\n    def __init__(self,damage=10,vectorx=1,shoot_parms=(10,140),start_spread=(-7,-7),permanent_spread=(-6,6),kickback=0,trajectory=None):\n        self.bullets=[]\n        self.start_spread=start_spread\n        self.kickback=kickback\n        self.permanent_spread=permanent_spread\n        self.infbullets=True\n        self.damage=damage\n        self.vectorX=vectorx\n        self.shoot_parms=shoot_parms",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Bullet:\n    def __init__(self,texure_bullet=None,width=5,height=5,damage=5,speed=3,player=False):\n        if texure_bullet==None:\n            self.texure_bullet=pg.Surface((width,height))\n            self.texure_bullet.fill((255,0,0))\n        else:\n            self.texure_bullet=texure_bullet\n            self.texure_bullet=pg.transform.scale(self.texure_bullet,size=(width,height))\n        self.rc=self.texure_bullet.get_rect()\n        self.x=0",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Box:\n    def __init__(self,pos=(0,0),hp=100,width=10,height=10,player=None,texture=None)   :\n        self.x,self.y=pos\n        self.width,self.height=width,height\n        self.obj=None\n        self.isdraw=True\n        self.hp=hp\n        self.player=player\n        if texture==None:\n            self.texture=pg.Surface((width,height))",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Player:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=100):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Wall",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Wall:\n    def __init__(self,start_xy=(0,0),width=10,height=10,texture=None):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((0,255,0))\n        else:\n            self.texture=texture\n            self.texture=pg.transform.scale(self.texture,size=(self.width,self.height))",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Circle:\n    def __init__(self, start_pos=(0, 0), radius=10, function=None):\n        self.x, self.y = start_pos\n        self.radius = radius\n        self.function = function\n        self.color = (0, 0, 0)\n    def set_color(self, color=(0, 0, 0)):\n        self.color = color\n    def move_x(self, n):\n        self.x += n",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Enemy:\n    def __init__(self,start_xy=(),width=10,height=10,texture=None,hp=10,stopX=-100):\n        self.x,self.y=start_xy\n        self.width,self.height=width,height\n        self.hp=hp\n        if texture==None:\n            self.texture=pg.Surface((width,height))\n            self.texture.fill((255,0,0))\n        else:\n            self.texture=texture",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Label:\n    def __init__(self, x, y, weight, height, text=\"Label1\", img_path=None):\n        self.x = x\n        self.y = y\n        self.weight = weight\n        self.height = height\n        self.text = text\n        self.img_path = img_path\n        if img_path != None:\n            self.zone = pg.image.load(self.img_path)",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Button:\n    def __init__(self, x: int, y: int, width: int, height: int, images_pathes=(), text=None, function=None, isPressed=False):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.text = text\n        self.images_pathes = images_pathes\n        self.function = function\n        self.isPressed = isPressed",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "Engine.Engine",
        "description": "Engine.Engine",
        "peekOfCode": "class Engine:\n    def __init__(self):\n        pg.init()\n        self.display = pg.display.set_mode((1280, 720))\n        self.w,self.h=(1280,720)\n        self.events = []\n        self.objects = {\"buttons\": [], \"lables\": [],\n                        \"enemys\": [], \"camera\": [], \"figures\": [], \"players\": [],\"walls\":[],\"images\":[],\"bullets\":[]}\n        self.runing = True\n        self.frame = pg.time.Clock()",
        "detail": "Engine.Engine",
        "documentation": {}
    },
    {
        "label": "pistol_traek",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def pistol_traek(x):\n    return x*0.0017\npistol=Weapon(damage=10,vectorx=1,shoot_parms=(10,150),start_spread=(-2,2),permanent_spread=(0,0),trajectory=pistol_traek)\nautomat=Weapon(damage=5,vectorx=1,shoot_parms=(40,150),start_spread=(-3,3),permanent_spread=(-4,1))\nlaser=Weapon(damage=25,vectorx=1,shoot_parms=(1,12),start_spread=(0,0),permanent_spread=(0,0))\npisdoc=Weapon(damage=60,vectorx=1,shoot_parms=(1,1),start_spread=(0,0),permanent_spread=(-15,15))\npistol_bullets=[Bullet(bullet_texture,4,3,1,r.randint(9,12),True) for i in range(10)]\nautomat_bullets=[Bullet(bullet_texture,12,5,3,r.randint(16,18),True) for i in range(45)]\nlaser_bullets=[Bullet(bullet_texture,100,4,70,r.randint(50,100),True) for i in range(1)]\npisdoc_bullets=[Bullet(bullet_texture_enemy,20,8,90,r.randint(35,37),True) for i in range(200)]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sh",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def sh():\n    fps.show(eng.display,text=f\"FPS - {int(eng.fps_now)}\",isbackground=False)\n    cords.show(eng.display,text=f\"xy({player.x} {player.y})\",isbackground=False)\n    hp.show(eng.display,text=f\"hp: {player.hp}\",isbackground=False)\n    enemyss.show(eng.display,text=f\"enemys: {len(eng.objects[\"enemys\"])}\",isbackground=False)\n    buls=len([i for i in eng.objects[\"bullets\"] if i.isdraw])\n    bulets_rightnow.show(eng.display,text=f\"bullets: {buls}\",isbackground=False)\neng.addCustomFunc(\"labelScroe\",sh,True)\n# left_button = Button(30, 660, 70, 40, text=\"Left\",\n#                      function=lambda: print(\"left\"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "eng",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "eng = Engine()\nimg_loader=ImageLoader() \nplayer=Player((200,340),90,80)\nphone=Image(img_loader.load(\"phone2.png\",colorkey=[True,(0,0,0)],scale=(1,1)),isphone=True,speed=-1.7,width=1280)\nphone2=Image(img_loader.load(\"phone2.png\",colorkey=[True,(0,0,0)],scale=(1,1)),isphone=True,pos=(WIDTH+5,0),speed=-1.7,width=1280)\nhero=img_loader.load(\"hero.png\",colorkey=[True,(255,255,255)])\nfps=Label(0,0,120,40)\ncords=Label(130,0,320,40)\nhp=Label(500,0,320,40)\nenemyss=Label(700,0,200,40)",
        "detail": "main",
        "documentation": {}
    }
]